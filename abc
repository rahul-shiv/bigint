printf("\nXOLO\n");
if (intal1 == NULL || intal2 == NULL|| intal2 == 0)
    return NULL;
bigint * dividend = (bigint *)intal1;
bigint * divisor = (bigint *)intal2;
while((divisor->arr)[0]==0 && (divisor->len)!=1){
    (divisor->len)--;
    (divisor->arr)++;
    divisor->offset += 1;
}
int n = divisor->len;
int m = dividend->len;
int i = 0;
bigint * rem = (bigint *)malloc(sizeof(bigint));
rem->len = n;
printf("remlen%d\n",rem->len);
rem->arr = (int *)malloc(sizeof(int)*n);
bigint * q = (bigint *)malloc(sizeof(bigint));
q->arr = (int *)malloc(sizeof(int)*(m-n+1));
for(int j = 0; j < n; j++){
    (rem->arr)[j]=(dividend->arr)[j];
}
printf("\n%d,%dxxx%s\n",m,n,intal2str(rem));
while(i+n<=m){
    bigint * temp = rem;
    printf("temp%s,templen%d\n",intal2str(temp),temp->len);
    if(intal_compare(temp,divisor) == -1 && i!=0){
        bigint * temp1 = (bigint *)malloc(sizeof(bigint));
        temp1->len = temp->len+1;
        temp1->arr = (int *)malloc(sizeof(int)*(temp1->len));
        for(int j = 0; j < n; j++){
            (temp1->arr)[j]=(temp->arr)[j];
        }
        (temp1->arr)[temp1->len-1]=(dividend->arr)[i+1];
        intal_destroy(temp);
        temp=temp1;
        printf("%dyolotemp%s,templen%d\n",i,intal2str(temp),(dividend->arr)[temp->len+i-1]);
        temp1=NULL;
    }

        int k = 0;
        bigint * tempq = (bigint *)malloc(sizeof(bigint));
        tempq = intal_create("0");
        while(intal_compare(tempq,temp) == -1){
            bigint * sum = intal_add(tempq,divisor);
            k += 1;
            intal_destroy(tempq);
            tempq=sum;
            printf("\ntemp%s, tempq%s, i%d, k%d\n",intal2str(temp),intal2str(tempq),i,k);
        }
        if(intal_compare(tempq,temp) == 0){
            printf("tada%d",k);
            intal_destroy(tempq);
            rem=intal_create("0oo");
            (q->arr)[i] = k;
        }
        else{

            bigint* tempdiff = intal_diff(tempq,divisor);
            intal_destroy(tempq);
            tempq=tempdiff;
            // intal_destroy(rem);
            rem = intal_diff(temp,tempq);
            // intal_destroy(temp);
            intal_destroy(tempq);
            (q->arr)[i]=k-1;
        }
        printf("\nsadhasdois%d,%d\n",i,(q->arr)[i]);
    i+=1;
}
q->len=i;
printf("\n");
return q;
